"use strict";define(function(require){var app=require("app");app.directive("dingdoneDataFormat",function($q,config,http,utils,modelService){return{scope:{field:"=",mapping:"=",funcstr:"=",callback:"="},replace:!0,templateUrl:"common/directives/model/dingdone-data-format.html",link:function($scope){var vm=$scope.vm={};angular.extend(vm,{init:function(){vm.initFinish=!0,$scope.funcstr&&(vm.getFunctionList(),vm.initEdit())},getFunctionList:function(){if(this.currentFunc&&(this.currentFunc="",this.currentParams=[]),!this.functions){var defer=$q.defer(),_this=this,url=config.getAdminAPI("fieldAdvance.getFunctions");return http(url,{method:"get",params:{data_type:$scope.mapping.data_type||"short_text"}}).then(function(json){_this.functions=json.result,_this.currentfunctionsDic=_this.initFunctionsDic(_this.functions),defer.resolve()}),defer.promise}},initFunctionsDic:function(funcs){var _this2=this,result={};return angular.forEach(funcs,function(func){result[func["function"]]=func,func.scheme&&_this2.initParamsDic(func.scheme.parameters)}),result},initParamsDic:function(params){angular.forEach(params,function(param,index){param.currentParam=_.find(param.value_enums,function(eachValue){return!!vm.currentParams&&eachValue.value===vm.currentParams[index]})})},initEdit:function(){if($scope.funcstr.match(/(\S*)@/))vm.input1=$scope.funcstr.match(/(\S*)@/)[1];else if($scope.funcstr.match(/(\S*)\{\{/))vm.input1=$scope.funcstr.match(/(\S*)\{\{/)[1];else if($scope.mapping.value){var arr=$scope.funcstr.split($scope.mapping.value);vm.input1=arr[0]||""}else vm.input1="";if($scope.funcstr.match(/\)(\S*)/))vm.input2=$scope.funcstr.match(/\)(\S*)/)[1];else if($scope.funcstr.match(/\}\}(\S*)/))vm.input2=$scope.funcstr.match(/\}\}(\S*)/)[1];else if($scope.mapping.value){var _arr=$scope.funcstr.split($scope.mapping.value);vm.input2=2==_arr.length?_arr[1]:""}else vm.input2="";vm.currentFunc=$scope.funcstr.match(/@(\S*)\(/)?$scope.funcstr.match(/@(\S*)\(/)[1]:"";var tempstr=$scope.funcstr.match(/\((\S*)\)/)?$scope.funcstr.match(/\((\S*)\)/)[1]:"",mach=/\'([^\']*)\'/g,mach2=/\{(\S*)\}/;vm.currentParams=tempstr.match(mach)?tempstr.match(mach):[],tempstr.match(mach2)&&vm.currentParams.unshift(tempstr.match(mach2)[1]),angular.forEach(vm.currentParams,function(str,index){str=str.substring(1,str.length-1),vm.currentParams[index]=str})},chooseFunc:function(func){this.currentFunc=func["function"],$scope.funcstr="",this.currentParams=new Array(func.scheme?func.scheme.parameters.length:1),this.currentParams[0]=$scope.mapping.value?$scope.mapping.value:"{{"+$scope.mapping.field_key+"}}",func.scheme&&this.initDefaultEnum(func.scheme)},initDefaultEnum:function(scheme){angular.forEach(scheme.parameters,function(param,index){param.value_enums&&param.value_enums[0]&&(vm.currentParams[index]=param.value_enums[0].value,param.currentParam=param.value_enums[0])})},chooseEnum:function(value,param,index){this.currentParams[index]=value.value,param.currentParam=value}}),$scope.callback=function(){var paramstr="";angular.forEach(vm.currentParams,function(str,index){0!=index&&(paramstr=paramstr+",'"+str+"'")});var fieldKey="{{"+$scope.mapping.field_key+"}}";return vm.input1?"":vm.input1="",vm.input2?"":vm.input2="",vm.currentParams&&vm.currentParams.length?(vm.currentParams[0]=$scope.mapping.value?$scope.mapping.value:fieldKey,$scope.funcstr=vm.input1+"@"+vm.currentFunc+"("+vm.currentParams[0]+paramstr+")"+vm.input2):$scope.funcstr=vm.input1+($scope.mapping.value?$scope.mapping.value:fieldKey)+vm.input2,$scope.funcstr},$scope.$watch("field",function(newVal){vm.init()})}}})});